package academy.devdojo.maratonajava.javacore.ZZGconcorrencia.test;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

import academy.devdojo.maratonajava.javacore.ZZGconcorrencia.dominio.Quote;
import academy.devdojo.maratonajava.javacore.ZZGconcorrencia.service.StoreServiceWithDiscount;

public class CompletableFutureTest04 {
    public static void main(String[] args) {
        StoreServiceWithDiscount service = new StoreServiceWithDiscount();
        // searchPricesWithDiscount(service);
        searchPricesWithDiscountAsync(service);
    }

    private static void searchPricesWithDiscount(StoreServiceWithDiscount service) {
        long start = System.currentTimeMillis();

        List<String> stores = List.of("Store 1", "Store 2", "Store 3", "Store 4");
        // stores.forEach(s -> System.out.println(service.getPriceSync(s)));
        stores.stream()
            .map(service::getPriceSync) // store:price:code
            .map(Quote::newQuote) // pegando o objeto Quote
            .map(service::applyDiscount) // aplicando o desconto
            .forEach(System.out::println);

        long end = System.currentTimeMillis();
        System.out.printf("Time passed to searchPricesSync %dms%n", (end - start));
    }

    private static void searchPricesWithDiscountAsync(StoreServiceWithDiscount service) {
        long start = System.currentTimeMillis();

        List<String> stores = List.of("Store 1", "Store 2", "Store 3", "Store 4");

        // Primeira coisa que a gente precisa fazer novamente é começar pelo stream e aí a gente vai utilizar
        // o map para pegar os nossos preços de forma assíncrona
        // Agora que eu tenho esse CompletableFuture eu preciso agora pegar o nosso Quote
        List<CompletableFuture<String>> completableFutures = stores.stream()
            // Getting the price async -> storeName:price:discountCode
            .map(s -> CompletableFuture.supplyAsync(() -> service.getPriceSync(s)))
            // Instantiating a new Quote from the string generated by getPriceSync
            .map(cf -> cf.thenApply(Quote::newQuote))
            // Composing the first completable future
            // Isso aqui ainda está retornando um CompletableFuture, então você está encadeando as chamadas e aí você vai chamar aqui
            // o thenCompose que vai retornar um novo estado completado com o valor que a gente passar na função, o que a gente quer
            // fazer aqui nesse thenCompose? Eu quero pegar porque o thenCompose agora vai chamar o applyDiscount, ou seja, ele vai
            // aplicar os descontos, mas o problema é que o desconto também é uma chamada que demora 1s, o que a gente precisa fazer?
            // A gente precisa fazer com que o thenCompose gere também esses descontos de forma assíncrona
            .map(cf -> cf.thenCompose(quote -> CompletableFuture.supplyAsync(() -> service.applyDiscount(quote))))
            // Lembrando que se você colocar aqui o stream direto o que vai acontecer se você tentar fazer a chamada o join? Ele vai
            // cair no mesmo problema que tivemos nas aulas anteriores o que vai acontecer quando você der o join? Como ele executa
            // lazy ele vai praticamente executar tudo de forma síncrona um por um, então o que a gente tem que fazer? A gente tem
            // que coletar aqui para lista porque a gente vai ter uma lista de CompletableFuture
            .collect(Collectors.toList());
        
        // Aí sim, depois que a gente tem essa lista de CompletableFuture a gente chama o stream, map e o CompletableFuture::join
        completableFutures.stream()
            .map(CompletableFuture::join)
            .forEach(System.out::println);

        long end = System.currentTimeMillis();
        System.out.printf("Time passed to searchPricesSync %dms%n", (end - start));
    }
}
